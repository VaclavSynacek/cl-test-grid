* Libraries

Quicklisp download statistics:

http://blog.quicklisp.org/2010/11/project-download-statistics.html

colunmns: download count, has common-lisp test suite (as of quicklisp 2011-07-30).

    714 + alexandria
    596 + babel
    520 + trivial-features
    503 + cffi
    450 + cl-ppcre
    423 - trivial-gray-streams
    404 + usocket
    403 + flexi-streams
    398 + bordeaux-threads
    393 - slime
    386 - cl+ssl (thre is a test.lisp, but it's not automated, and no (asdf:operate (op asdf:test-op) ...)
    371 - chunga
    370 + cl-base64
    361 - cl-fad
    339 - md5
    327 - quicklisp-slime-helper
    323 + trivial-backtrace
    321 - rfc2388 (there is a test.lisp, but there is no asdf:test-op, and the code in test.lisp 
                   doesn't return fail/ok status, it jsut prints something to the console)
    317 - hunchentoot (there are tests and asdf:test-op, but I am affrait it might take
                       lot of work to automate it: test-op starts server and doesn't
                       stop; I am also afraid it might hang sometimes; implementation
                       would also require checking for single-threaded lisps
                       (by hunchentoot::*supports-threadss-p* ?)
                       and returning :no-resource. Leave hunchentoot for a later
                       stage)
    293 - salza2
    289 + puri
    285 - closer-mop (no asdf:test-op. there is a folder "test" with some file jeffs-code.lisp,
                      but it's a code to reproduce some particular issue. It does not seem
                      to be intended for automated regression testing of closer-mop)
    225 + anaphora
    224 + parenscript
    221 - cl-who
    207 + trivial-garbage
    201 + iterate
    193 - cl-vectors
    190 - zpng
    177 - asdf-system-connections
    174 - zpb-ttf
    173 + uffi But the test suite is non trivial (for example, it defines asdf:compile-op 
               for C files using make). Probably that's why quickisp does not
               make the uffi-tests.asd availabel for ql:quickload. A study is needed about 
               how to include this system, therefore I avoid it for now.
    173 + metabang-bind
    170 - split-sequence
    164 - vecto (there is a test.lisp, but it's not automated, intended for manual run and eye-testing of the resulting images)
    163 + cl-json
    162 + cl-containers
    161 + metatilities-base
    159 - fare-utils
    156 + weblocks (do these tests start hunchentoot? seems no, it creates mock objects for request, response, etc.)
          Unfortunately, as of today, (quicklisp:quickload :weblock-test) doesn't work,
          bacause the test suite does not compile.
          https://github.com/quicklisp/quicklisp-projects/issues/232
    156 - fare-matcher (no test-op, but there is fare-matcher-test.asd with one test defined using stefil)
    148 - drakma
    144 + cl-cont
    143 - closure-common
    140 + moptilities
    138 - f-underscore
    137 + trivial-timeout
    136 + metatilities
    135 + clsql (big test suite, requires database server(s). Runs the tests 
                 tests on the DB servers you specified in the configiration. 
                 Therefore we need to think how to represent results - we can't
                 just collect results under the same name "clsql", because 
                 different agents might have tested different servers.
                 Conclusion: very useful test suite to include into 
                 our test set, but we will do it later).
    133 + cxml (But testing it requires manual preparation of test data:
                checkout the XML test suite from w3.org CVS repostory,
                patch it, build with ant. Conclusion: desirable to fix
                improve the situation, e.g. by providing ready
                to use test data files in a .tar archive
                and downloading it using quicklisp' http utility).

* CL implementations
  CLISP/Windows - OK
  SBCL/Windows - OK
  CCL/Windows - OK
  ABCL 1.0.0 - stack overflow when compiling alexandria tests, hungs for very long time when running CL-PPCRE tests.
  Allegro Express Edition 8.2, Windows - not enough heap to compile the test.
  ECL 11.1.1, Window - quicklisp doesn't work: https://sourceforge.net/tracker/?func=detail&aid=3462618&group_id=30035&atid=398053

* Quicklisp 2011-12-03

  From 23 libraries, 9 libries pass tests on all the lisps:
  cl-base64, cl-containers, cl-ppcre, metatilities, metatilities-base,
  parenscript, puri, trivial-features, trivial-garbage.

  Other libraries fail on some or on all Lisps. Often is not a 
  bug in the library itself, but bug in tests.

  Details:
** alexandria                                              :expected_failure:
   Fails on CLISP, but all the failures are "expected failures":

   3 out of 208 total tests failed: ALEXANDRIA-TESTS::COPY-HASH-TABLE.1, 
       ALEXANDRIA-TESTS::ALIST-HASH-TABLE.1, 
       ALEXANDRIA-TESTS::PLIST-HASH-TABLE.1.
   No unexpected failures.

   I am not sure how to understand the term "expected failure",
   does it mean the library does not function property
   on the given lisp implementation and it's a kown issue,
   or just that the given implementation can not test 
   the functionality properly; or something else.
** anaphora                                                        :reported:
   Fails on windows implementations due to bug in tests:

   Test ANAPHORA-TEST::SCOND.3 failed
   Form: (ANAPHORA:SCOND
            ((SYMBOL-VALUE '*DEFAULT-PATHNAME-DEFAULTS*)
             (LET ((ANAPHORA-TEST::TMP ANAPHORA:IT))
               (UNWIND-PROTECT (PROGN (SETF ANAPHORA:IT (TRUENAME "/tmp/")) 
                                                        (NAMESTRING *DEFAULT-PATHNAME-DEFAULTS*)) 
                   (SETF ANAPHORA:IT ANAPHORA-TEST::TMP)))))
   Expected value: "/tmp/"
   Actual value: "c:/tmp/".

   Reported to the anaphora-devel:
   http://lists.common-lisp.net/pipermail/anaphora-devel/2011-December/000542.html
   
** babel                                                           :reported:
   Different number of failures/errors of unknown nature 
   on different Lisps (8, 9 or 5).

   Reported to bable-devel:
   http://lists.common-lisp.net/pipermail/babel-devel/2011-December/000121.html   
** bordeaux-threads                                            :correct_fail:
   Fails on CLISP with error  "There is no thread support in this instance..."
   That's correct, CLISP does not support threads in official builds
   (threading is considered "experimental" due to absense of thread-safe
   hash-tables).

** cffi                                                            :reported:
   Tested only on Linux, has different number (of expected and unexpected)
   failures on different Lisps.
   
   Reported to cffi-devel:
   http://lists.common-lisp.net/pipermail/cffi-devel/2011-December/003644.html
** cl-cont                                                         :reported:
   1 test fails on CLISP:
   Test CL-CONT-TEST::DOCUMENTATION-SYMBOL-LOOKUP failed
   Form: 
     (PROGN (FMAKUNBOUND 'CL-CONT-TEST::DOC-TEST-FUN) (CL-CONT:DEFUN/CC CL-CONT-TEST::DOC-TEST-FUN NIL "foo" T)
       (SETF (DOCUMENTATION 'CL-CONT-TEST::DOC-TEST-FUN 'FUNCTION) "bar")
       (EQUAL (DOCUMENTATION 'CL-CONT-TEST::DOC-TEST-FUN 'FUNCTION) "bar"))
   Expected value: T
   Actual value: NIL.

   Reported to the weblocks google group (as cl-cont doesn't have
   separate mailing list):
   https://groups.google.com/forum/#!topic/weblocks/OyFvVsFh-Fk

** cl-json                                                 :expected_failure:
   One "expected" failure. The developers keep this failing test
   to not forget to implement a feature: calling cl-json:bind
   inside of cl-json:bind (as far as I understand).

** cl-ppcre                                                        :reported:
   Fails on Allegro
   Reported: https://github.com/edicl/cl-ppcre/issues/2
** flexi-streams                                                   :reported:
   Fails on SBCL with message "0 is not of type (MEMBER NIL T)".
   Most likely it's a bug in tests.
   Reported to the flexi-streams-devel mailing list:
   http://lists.common-lisp.net/pipermail/flexi-streams-devel/2011-October/000275.html
   Registered aslo in the issue tracker:
   https://github.com/edicl/flexi-streams/issues/2
** iterate                                                         :reported:
   One test fails on all the lisps:

   Test ITERATE.TEST::BUG/WALK.2 failed
   Form: (ITERATE:ITER
           (RETURN
            (IF (ODDP 1)
                (PROGN)
                'ITERATE.TEST::EVEN)))
   Expected value: NIL
   Actual value: ITERATE.TEST::EVEN.

   Probably a bug in tests.

   Reported to iterate-devel:
   http://lists.common-lisp.net/pipermail/iterate-devel/2011-December/000686.html
** metabang-bind                                                   :reported:
   Fails on CLISP with error:

   [package metabang-bind-test].....Unhandled ERROR is signaled: 
   FUNCALL: undefined function #:BINDING-GENERATOR267598

   Reported to Gary King (the author) by email.

** moptilities                                                     :reported:

   Fails differently on different Lisps.

   For example CLISP does not implement FUNCTION-ARGLIST, and 
   on CCL and SBCL FUNCTION-ARGLIST returns different value
   than expected by moptilities tests: 
   (&KEY :A :B) vs (&KEY A B) on CCL and
   (&KEY A (B 2)) vs (&KEY A B) on SBCL, and similar erros.

   Also SBCL inserts special class SB-PCL::SLOT-OBJECT
   into the class precedence list of usuall classes, but
   moptilities tests expect only STANDARD-OBJECT and T
   here.

   Reported to Gary King (the author) by email.

** parenscript                                                     :reported:
   Fails on Allegro. Reported to the parenscript-devel:
   http://lists.common-lisp.net/pipermail/parenscript-devel/2012-January/001076.html
** trivial-backtrace                                               :reported:
   Fails on CCL and SBCL because the test code tries to produce
   a division by zero error, but these lisps seem to optimize
   out the division experession as a dead code, therefore the
   error does not occur at all and the test does not generate
   the stacktrace.

   Reported to Gary King (the author) by email.

** trivial-timeout                                                 :reported:
   The same error on all the lisps:

   ERROR : trivial-timeout-test : test-1
   Condition : <: NIL is not a real number
   During       : TESTING
   Code         : 
   ((MULTIPLE-VALUE-BIND (RESULT MEASURES CONDITION)
        (HANDLER-CASE (WHILE-MEASURING (SECONDS) (WITH-TIMEOUT (0.5) (SLEEP 1.0)))
                      (ERROR (C) (DECLARE (IGNORE C))))
      (DECLARE (IGNORE RESULT))
      (ENSURE (< (FIRST MEASURES) 0.75) :REPORT "timeout worked")
      (ENSURE (AND CONDITION (TYPEP CONDITION 'TIMEOUT-ERROR))
              :REPORT
              "Received timeout error")))
  

   Looks like (< (FIRST MEASURES) 0.75) signals this error.

   Reported to Gary King (the author) by email.

** usocket                                                         :reported:
   Different failures on different lisps.

   Reported to usocket-devel:
   http://lists.common-lisp.net/pipermail/usocket-devel/2011-December/000719.html
