;;;; -*- Mode: org; indent-tabs-mode: nil; coding: utf-8; show-trailing-whitespace: t -*-
* March-April 2013:
** DONE ABCL 14300 (ensure utf-8)
   CLOSED: [2013-03-07 Чт 04:27]
** DONE ABCL HEAD (14420) (ensure utf-8)
   CLOSED: [2013-03-07 Чт 06:48]
** DONE ql 2013-02-17 on windows
   CLOSED: [2013-03-16 Сб 15:16]
** DONE send the test contribution digest and ask Pat to remove ecl-12.2.1-ceaff1a7-macosx-x86-bytecode
   CLOSED: [2013-03-16 Сб 16:02]
   and propose everybody to use only releases for the "main" test results storage
** DONE adjust cl-fad testsute adapter (test.lisp was renamed)
   CLOSED: [2013-03-03 Вс 22:21]
** DONE adjust cl-num-utils testsuite adapter (it switched to new test framework - clunit)
   CLOSED: [2013-03-07 Чт 04:26]
** DONE add clunit support to test-grid-testsuites
   CLOSED: [2013-03-07 Чт 04:26]
** DONE ASDF 2.32 on linux (switch back to ASCII?)
   CLOSED: [2013-03-16 Сб 15:17]
** DONE check if CCL rc2 still has the failures I reported for rc1
   CLOSED: [2013-03-16 Сб 15:16]
   Done: http://clozure.com/pipermail/openmcl-devel/2013-March/014184.html
** DONE review quicklisp 2013-02-17 results
   CLOSED: [2013-04-06 Сб 00:46]
** DONE review ECL results collected by Juan Jose
   CLOSED: [2013-04-06 Сб 00:46]
** DONE discuss with Paul Nathan the lisp implementations to run on his OS X PowerPC machine
   CLOSED: [2013-04-06 Сб 00:50]
   https://groups.google.com/d/msg/cl-test-grid/rY2mJcMFWv4/YPPNgkyPGHEJ
** DONE create test suite for drakma and add it to test grid
   CLOSED: [2013-03-23 Сб 11:08]
   https://github.com/edicl/drakma/pull/27
** DONE add optima test suite
   CLOSED: [2013-03-23 Сб 16:12]
** DONE [1 h] run quicklisp 2013-03-12 tests on my linux server
   CLOSED: [2013-04-06 Сб 03:20]
** DONE [8 h] fix the ASDF output-translation hangling by test-grid-agent which causes
   CLOSED: [2013-04-06 Сб 14:21]
   problems testing cffi-grovel dependent libraries on quicklisp 2013-03-12:
   https://groups.google.com/forum/?fromgroups=#!topic/cl-test-grid/mvrLUcIyy5g

   And rerun tests.
** DONE [8 h] preform pre-release testing of bordeaux-threads
   CLOSED: [2013-04-06 Сб 14:21]
   http://lists.common-lisp.net/pipermail/bordeaux-threads-devel/2013-March/000225.html
** DONE [4 h] run quicklisp 2013-03-12 tests on my windows machine
   CLOSED: [2013-04-14 Вс 00:57]
** DONE [6 h] review quicklisp 2013-03-12 results and report any possible regressions
   CLOSED: [2013-04-20 Сб 01:28]
** DONE [4 h] new test result attributes: :fail-condition-type and :fail-condition-text
   CLOSED: [2013-04-20 Сб 15:50]
   When unhandled SERIOUS-CONDITION is signalled during testing (asdf system load or testsuite),
   in addition to recording the :fail status, record the condition type and text.

   The main purpose of this task is to collect the list of foreign libraries
   needed by all quicklisp libraries and to recognize foreign library -related
   errors during reporting and exclude them from results diff.

   This particular task only covers collection and recording of :fail-condition-type
   and :fail-condition-text attributes, but not reporing.

** TODO [2 h] announce :fail-condition-type and :fail-condition-text
   After we collect test results, announce the possibility to retrieve
   the list of missing foreign libraries.
** TODO notify drakma mainteners when there are test results form drakma suite
** TODO notify optima mainteners when there are test results from optima suite
** TODO retest the latest ASDF
* User Requests
** TODO Vladimir Sedach: test multithreaded CLISP
   (less important now as Vladimir already installed such lisp on his
   machine and contributes tests)
** TODO Luis Oliveira: buld library heads from source control
* Backlog
** TODO invoke QL-DIST:DELETE-AND-RETRY restart in case of QL-DIST:BADLY-SIZED-LOCAL-ARCHIVE
   Restrict maximun number of retries to 3.
** TODO [16 h] Integrate tg-suites:libtest with asdf:test-system
** TODO [1 h] move tg-suites::normalize-status call into an around method of tg-sutes:libtest.
** TODO [40 h] publish pivot reports to online spreadsheet,
   so that notes about particular failures may be entered
   right into the table.
   Difficulties: the current pivot reports contains several
   links in one table cell. None of the online spreadsheet
   I saw so far allow this.
** TODO [4 h] sptm: if the replica is fresh, load snapshot (if present),
   don't execute the transactions from the beginning, ever if the full
   transaction log is stored online.
   May be implmented either by checking (version vdata) == 0 => load snapshot,
   or by (+ 100 (version vdata)) < (max-transaction-version log) => load snapshot.
   In the latter case: should we hardoced 100 or pass it as a parameter?
** TODO [8 h] when submitting shortened version of a log to online storage,
   the :log-byte-length attribute stores the length of the original file.
   Should we store the shortened length instead?
** TODO [8 h] when killing a test subprocess due to timeout
   we send it a signal, then write a message to log and continue.
   But the signal is handled asynchronously, so sometimes
   the process continues some time after we've written log footer,
   and even writes to the log below the footer.
   Example logs:
   "361349" "359363" "355443" "375901" "374959" "385018" "AMIfv94t7Sr7BRnCnuDJlNAbLWTWESlU8T2-EMrFprYvGLIF78KIpxCScAvQVy6-N9A7II4PMMCh-u_8mTQdzH3EPGp1U4t3xHnxBhEwqDZDxfrCFO5U-jvSLN3syJty4V9oXu-DLbFr-zrB0NpyMTtEo86omldetQ"
** TODO [8 h] authentication for DeleteBlobs servlet
** TODO [5 h] send notifications not to the admin directly, but to a mailing list
** TODO [8 h] gc blobs
** TODO [1 h] Add CCL command line parameter to limit heap size when running agent to run-agent.sh.sample, run-agent.bat.sample
** TODO [2 h] Make JNA available to ABCL running under cl-test-grid.
   Problem: jna.jar should be in classpath, or maven should be installed on the machine.
   As cl-test-grid doesn't use the ABCL's shell script, the .jar should
   be added to classpath explisitly. Add another parameter to lisp-exe:abcl class?
   Or just modify the CLASSPATH variable on my machine?
   Install maven?
** TODO [4 h] document, for each CL community role, how he can benefit from testgrid
   - library mainaner:
     - Status of your library ASDF systems loaded by various lisps
     - If you have a testsuite, results of your test suite on various lisps
     - Updated with every quicklisp distro
     - Regressions (desirable to show regression
       history along quicklisp versions).
   - lisp implementation maintener
     - How you lisp is supported by libraries
     - What libraries are most importatn to fix,
       to unlock your lisp to maximum amount
       of code (other libraries), and correspondingly
       to users
     - Pre-release testing: run tests on the new version,
       compare with results of the previous release,
       ensure there is no regressions and see improvements.
   - distribution maintainer (Quicklisp):
     - release testing: run tests on the same lisp implemetations
       as run on the previouse release, and compare results:
       ensure there is no regressions, and see the improvements.
   - application developer
     (Actually, the application developer as the end user
     of CL infrastructuure, rarely will use testgrid directly.
     He, hopefully, will benefit indirectly, from improved
     stability and quality of the CL world).
     Still, the end user may:
     - see what libraries work on his platform
     - giving his ASDF system see what dependencies
       are broken on what platform
** TODO [2 h] document the security issue: agent runs lot of code provided by unknown people
   Discuss with Zach, what we know about these people
   and what level of confidence we have in their code.
   This includes:
   - confidence in their good intentions
   - confidence their code don't open unintentional doors to the machine
     (e.g. opens a socker, receives s-expression from it and executes)

   Anyway, the final solution will most likely be to advice
   contributors to run agent under a separate user on their OSes.
** TODO Apply for a subdomain at common-lisp.net, e.g. test-grid.common-lisp.net,
   It is another way to solve the security issue with HTML injections,
   because in this case web browser keeps test grid reports in different
   security domain than other common-lisp.net pages.
** TODO pivot reports: make row header column always visible
** TODO kind of burndown chart: avearage number of bugs by time
** TODO visual graph of library dependencies, clickable (SVG?),
        so that we can see what libraries are blocked when
        the given library is broken, and what dependencies
        block this library.
        Look for help from http://chart.ravenbrook.com/ ?
** TODO has-regressions-p - cover all the possible cases by unit tests?
** TODO Add ANSI test suite?
  Does not depend on quicklisp distro version; but BTW may be distirbuted via quicklisp.
** TODO Test source control HEADs of libraries, not only quicklisp releases
   Rrequires a way to specify lib-wold as a quicklisp version with some
   library versions overriden (checkout this particular
   libraries from the scm), so that library author can quickly
   get test result for his changes (fixes)  in scm.
   An implementation idea to consider: almost every scm allows
   to download asnapshot via http, so the quicklisp http machinery may
   be reused here, whithout running a shell command for
   checkout.
   40h

** TODO Add more test suites
*** TODO add testsuites of more libraries from quicklisp

    See the following files in the "docs" directory:

    test-systems - list of all the ASDF systems in Quicklisp
           with a word "test" in the system name;
           ordered by the project download count.

    detect-test-systems.lisp - the lisp code which
          generated the test-systems file

    quicklisp-download-statistics-2012.txt - quiclisp download statistics

    coverage.org - information about the libraries already reviewed:
          whether it is added to test grid, and if not added - why
         (no test suite, needs manual configuration, hangs, etc.)
          The libraries are ordered in alphabetical order.

*** TODO create drakma test suite - will ensure drakma works on all the lisps.
    Drakma test suite is a must. HTTP client today is as vital thing
    as file system access. It should work on all the lisps.
    Create a test suite, the simples one - download one file
    form common-lisp.net. And make sure it works on all the lisps.
** TODO terminology improvement
  - db format: rename?
                  :libname -> :project
                  :status -> :test-status
                  :log-blob-key -> :test-log-blob-key
                  :log-byte-length -> :test-log-byte-length
  - project name: a keyword, or string? Currently a keyword; but ASDF system names are strings.
  - rename test-grid-testsuites:*all-libs* to *all-testsuites*?
  - I often call library test logs "blobs", while it would be more correct to say "logs",
    because they are have conctrete context type text/hmlt and will have content encoding "gzip"
** TODO Install more lisps on my VPS
  I already have acl 8.2a express, ccl 1.8, sbcl 1.57, ecl from git, cmucl 20c
*** DONE ABCL
   CLOSED: [2012-08-20 Пн 01:48]
*** TODO CLISP (build a multithreaded version)
** TODO For all the libraries which need specific environment
   (like cffi, cl-sql) correctly detect the absense of required
   envorinment and return :NO-RESOURCE status and provide guiding message to the
   user how to configure them (log to the output test output?).

   This may be implemented by invoking generic function
   (test-grid-testsuites:check-enviroment <library-name> <test-enviroment-object>) => :NO-RESOURCE or :OK,
   by default returns :OK, but the library maintainer
   may define a method for his library which checks for available envoriment
   and return :NO-RESOURCE, or if the enviroment is OK
   returns :OK and may store some data on the test-envormment-object.

   Then (test-grid-testsuites:libtest <library-name> <test-enviroment-object>) is
   called by agent. So the check-envoronment method may pass enviroment
   information (for examle DB connection parametrs for cl-sql) to the test suite.

   Also we need to define a way for check-enviromnent to be configured
   by the end-user who runs the agent, because every installation
   may have different DB connection parameters. For example, check-enviroment
   may load a file <workdir>/test-configs/<library-name>-config.lisp.
   This file is expected to be provided by the user who runs agant
   and is willing to spend an extra effort to contribute test
   results for these libraries (this is optional of course).

   We may provide only the API and leave the implementation
   of check-environment methods to the library maintainers, because
   othersize it may take very long time for us to impelement
   it for all such libraries.

   Although, for the most important libraries which don't have
   enough maintainers we could provide implementation.
** TODO foreign library load errors should be recognized and represented
   in test results (maybe as :no-resource status, but it's better
   to have a special status, including the library name. that way
   we will have up to date list of foreign libraries necessary
   to have quicklisp fully working).

   Catch CFFI conditions, and in case of ABCL, failure to load JNA classes.
   This should be done for load test and for testsuite run.

   After this is implemented, it is desirable to re-run the tests on
   the current and the previous Quicklisps, so that we don't redundant
   items in the diff report (what previous was a load failure
   now becomes :no-resource - not a failure).
** TODO Introduce an option to limit agent run time
  Use case: someone wants to run agents at night, but have
  the machine free from agent during dayly work.
  We will provide and option the user can configure in run-agent.lisp
  which limits agent run time so that agent exits after this duration.

  Before terminating agent should sumbit the results accumulated to server
  (even partial test runs). This is necessary becase we can not
  be sure the user will ever start the agent again.

  This also means that if next time agent is started, it should
  know what part of test run is completed, and continue for
  remaining projects (record the completenes status
  per library in persistence.lisp instead of whole
  quicklisp distros?)
** TODO A "quit" command for soft termination of the agent instead of killing it
   Will ensure agent finishes only afther all his child processes
   are finished, so that starting agent again is safe.

   How the command should be sent to agent? Via web interface?
   Lisp command from REPL?

** TODO test run duration should be decreased by the time of hibernation
** TODO when logging the name of a library currently being tested, log also it's number in the
   total number of libraries, e.g. [41 of 56].
** TODO remove the old test-runs, quicklisp directordires and ~/cl-test-grid-settings.lisp
   Do it autmatically, or send email to all the contributors, or just ignore this issue
** TODO Admin stores a hashmap for lisps to be tested (or skipped)
    by particular agent in the aget sources (note, the agent
    updates the source every time from git) This allows to distribute work
    between agents having overlaping sets of lisp implementations.
    Need a mechanizm for announcing the lisps present on
    agent (probably just add agent-id to the test run
    description submitted form agent to admin, and this as an announcement).
    As the compilers versions are changed, probably the
    hashmap to store responsibility specifications should
    contain not full lisp implementation identifier,
    but only generic name, like SBCL instead of SBCL 1.0.57.
    But allow for ECL-bytecode to be distingueshed from
    ECL-lisp-to-c. I.e. in the end we can get some kind
    of patterns for lisp implementation identifier. And
    the identifier will be a structured object, not just
    a string; provably it will even contains *features*
    of the lisp implementaion.
** TODO Agent: retry when test results upload failed.
** TODO recompile cl-test-grid-agent sources at every agetn run?
   As currently ASDF doesn't rebuild depending libraries
   when the libraries they depend on changed (add
   links to this TODO item when Internet connection
   will be up)
   Related thread on asdf-devel:
   http://lists.common-lisp.net/pipermail/asdf-devel/2012-July/002548.html
** TODO kill process tree on unix in case the test suite exceeded timeout
   Currenlty we only kill the lisp process, but not it's children.
   Some test suites may start other programs, and it makes sense
   to kill the testsuite child process too. Implementation hint:
   the most portable API on unix to find out child processes,
   as it seems to be, is the ps program. We will need to
   implement a shell script killtree.sh <pid> which uses
   ps to find all descendents and kill them. Portable format
   of ps arguments should be used.
** TODO consider what test suite timeout value is the best (30 mins currently)
** TODO should the lisp-process-timeout condition inherit from serous-condition, error, or just condition?
** TODO program parameters escaping is not perfect. When we
   run CLISP as an external process, it can not stand
   string literals with " inside.
** TODO enable/disable program parameters escapting depending on the
   external-program behaviour (consider also using input stream
   of the lisp process, or a temporary file)
** TODO prevent test run directory names conflict (currently they
   are named by timestamp with resolution to seconds)
** TODO temp file naming: ensure unique [probably specify random-state]
** TODO persistence.lisp format - sort and newline for every record
** TODO refactor agent, to make the low-level building blocks suitable
   for the following use cases:
   - pre-release tesf of lisp compiler: do not delete test run info (as vsedach asked)
   - test of new ASDF version (ensure the new ASDF is loaded before quicklisp/setup.lisp is loaded)
   - test of patched quicklisp
** TODO Project dependencies info is hardcoded from quicklisp 2012-09-09. Make it more flexible
   and use the dependency info for the quicklisp we generate report for.
** TODO Child processes collision if agent is restarted very soon after it was killed.
   Agent is pretty resistent to restarts. If it is killed
   and started again, it can continue test run from the point
   reached previously.
   It prevents of starting of several agent instances by "locking"
   via opening a TCP port.
   If laptop is hibernated, after waking up agent re-runs the
   testsuite interrupted by hibernation (to avoid possible
   problems with lost network connections of the testsuite,
   and similar).

   But there is one problem. If we kill agant, we don't
   kill its child processes running tests.
   If we start another agent before the child process finishes
   (completes the testuite or loads the ASDF system), then
   new agent is anaware about the child process, and may start
   new process with the same task. These two child processes,
   the old one and the new one, may intefrere, for example
   thying to write to the same .fasl file, and to the same
   log file.

   How to solve this?
   - To solve what exactly?
   - To ensure, the child process run by new agent,
     the result of which finally gets into the DB,
     is not affected by obsolete child processes
     of the old agent.

** TODO Rebuild the free lisps from source control daily, before running test-grid-agent
** TODO Enable HTTP caching for library test logs (good recipe: https://developers.google.com/speed/docs/best-practices/caching)
** TODO add CCL revision to the version string (I have impression
   that CCL versions checked out at different time from the official release SVN
   svn co http://svn.clozure.com/publicsvn/openmcl/release/1.8/darwinx86/ccl
   may be different. I.e. despite it is called "release 1.8", the mainteiners
   commit fixes there, and the version string we use now - "ccl-1.8-f95-linux-x86",
   does not reflect this. In other words, our version string does not
   identify CCL uniquly.
** TODO code coverage: SBCL provides sb-cover. Integrate it somehow
        and publish in the reports.
        How?
        - extend the lib-result object with one more field, percentage 
          of the covered lines?
        - separate report?
        - or just output the information into the log?
** TODO osicat: automate the :no-resource condition
** TODO ABCL, cffi tests: return :no-resource if JNA is not available
** TODO cffi tests: return :no-resource if C compilation fails on linux
** TODO cl-fad and flexi-streams use c:\tmp as a temporary directory
   on Windows; it's not very good. Maybe try to provide them
   with a temporary directory inside of the cl-test-grid working
   dir?
** TODO quicklisp distro version in report headers may be a link to
   list of library versions in this ql version
   (like this: http://www.quicklisp.org/beta/releases.html, but
   it's only for the latest QL).
** TODO Description of CSV report may link to an example of the CSV report  :report:overview:
   imported to a Google Spreadsheet
   with pivot calculating avearage duration of 
   tests for every library.
** TODO spell check the reports-overview                    :report:overview:
** TODO quick access to the test run info from the pivot report table cell  :report:pivot:
   (or maybe just print the test run info to the log, like a header;
    but it is a duplication and also we will have invonviniences
    if we want to modify this infromation in the lob BLOB)
** TODO Limit library output file size stored on file system (how?).
   Note, the size of file submitted online is limited already
** TODO finalize the terminology we use in the code
   to refer our main data:
   - test status for a particular library
   - library test result object (includes the status
     as well as log length, the key of the log
     in the online blob store, probably the
     library test duration)
   - list of library test results in a particular test
     run
   - test run description, consists of lisp name,
     libraries set (think quicklisp distro),
     the user contacts, total test run duration,
     etc.
** TODO when GAE quotas (for requests, emails, anything else)
   are exceeded, recognize it and display a meaningfull
   message to the user.
** TODO usocket test suite might need manual configuration,
   see their README. Distinguish the case
   when the manual configuration hasn't been
   performed and return :no-resource status.
** TODO An utility to delete blobs not used in db.lisp from the blobstore :server:
