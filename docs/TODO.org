;;;; -*- Mode: org; indent-tabs-mode: nil; coding: utf-8; show-trailing-whitespace: t -*-
* 0.5.0 Separate status value for compilation failure
  Important in general and a user reques by Juan Jose Garcia-Ripoll.
** TODO Test status should include separate indicator for the library compilation and loading.
   This allows to add even libraries without test cases to the
   test grid.

* 0.5.1 Test all the libraries in quicklisp. (if test-grid-testsuites-libtest is not implemented, test only compilation)
* 0.5.1 Install more lisps on my VPS
* 0.6.0 Reports Improve 2
** TODO make lisp code the main and the easiest interface to the test results:
   convenient interation, filtering and matching functions.
   We want to add to every HTML report a secion with lisp
   code generating this report, so that all the users
   see and understand how to query data and can follow
   these examples.
** TODO document the data format, data access functions, reporting
   functions and utilities.
** TODO the diff report (aka regressions report) - diff along various dimentions
   Currently we can only find differences between test statuses
   of a library on different quicklisps, when the lisp implementation
   version is a constant.
   We should generalize this to compare test results on two 
   different versions of a compiler (windows/linux or old compiler
   version and new one). Also when comparing test results, 
   we must be more flexible than matching results only of
   exactly the same lisp-implementation-identifier, 
   because we don't always has exactly this lisp.
   For example when we compare the lates qicklisp version
   with the previous one, we may want to consider ecl-12.7.1-dee2506a-linux-x86-lisp-to-c
   and ecl-12.7.1-xxxxffff-linux-x86-lisp-to-c as the same compiler, 
   because otherwise we might just have no results to compare.

   In other case, we want to compare test results of these two
   compilers. Then we consider them different and 
   different sides of comparision: one on the left hand,
   and another on the right side.
   
   At first sight the task may be solved
   by parametrizing the report by two functions:
   - the one which decides what results to put to left side and to right side
   - a predicate which decides if a result cell from the left side is comparable 
     to a result from the right side.

** TODO library mainainer page:                             :report:informer:
   with reports about the test statuses 
   for this single library on various platforms with
   various quicklisp versions,
   history of regressions (by quicklisp versions)
** TODO Prevent HTML injection via test-run-info                     :report:
** TODO pivot reports: header column always visible
** TODO Filters for pivot reports
** TODO limit amount of data included into to HTML reports to the last 3 quicklisp releases 
   to improve the page performance and load time.
** TODO kind of burndown chart: avearange number of bugs by time
** TODO visual graph of library dependencies, clickable (SVG?),
        so that we can see what libraries are blocked when
        the given library is broken, and what dependencies
        block this library.
        Look for help from http://chart.ravenbrook.com/ ?
** TODO has-regressions-p - cover all the possible cased by unit tests?
* 0.7.0 Add more test suites
  - drakma test suite - create and ensure drakma works on all the lisps.
    Drakma test suite is a must. HTTP client today is as vital thing
    as file system access. It should work on all the lisps.
    Create a test suite, the simples one - download one file
    form common-lisp.net. And make sure it works on all the lisps.
* lisp-agent postponed issues
** TODO remove the old test-runs, quicklisp directordires and ~/cl-test-grid-settings.lisp
   Do it autmatically, or send email to all the contributors, or just ignore this issue
** TODO contributor monthly summary.
   Now that test grid agent can be run by cron, sending confirmation
   email to contributor for every test result doesn't make sense,
   because the contributor is anaware when testing happens. But providing
   feedback is necessary. We may send a monthly digest to contributor
   summarizing the test results received from his agent(s). May be implemented
   as a cron task running say at the 8th of every month (so that admin has
   time to commit all the resutls to db.lisp and the digest
   producer task sees them). Admin should be BCC'ed in these emails.
   Should it be a single email for all contributors and the mailing list,
   or each contributor should be emailed individually?
** TODO a parameter to the main function: limit the maximum time the agent works
** TODO ensure the tesg-grid code is recompiled when necessary
   The libraries being tested are recompiled at every test run.
   It would be good to ensure test grid code is also correctly
   recompiled.
   - agent (the main process)
   - test frameworks APIs (loaded into the child processes)
   Related thread on asdf-devel:
   http://lists.common-lisp.net/pipermail/asdf-devel/2012-July/002548.html
** TODO Admin stores a hashmap for lisps to be tested (or skipped)
    by particular agent in the aget sources (note, the agent
    updates the source every time from git) This allows to distribute work
    between agents having overlaping sets of lisp implementations.
    Need a mechanizm for announcing the lisps present on
    agent (probably just add agent-id to the test run
    description and consider test results as an announcement).
    As the compilers versions are changed, probably the 
    hashmap to store responsibility specifications should
    contain not full lisp implementation identifier, 
    but only generic name, like SBCL instead of SBCL 1.0.57.
    But allow for ECL-bytecode to be distingueshed from
    ECL-lisp-to-c. I.e. in the end we can get some kind
    of patterns for lisp implementation identifier. And
    the identifier will be a structured object, not just
    a string; provably it will even contains *features*
    of the lisp implementaion.
** TODO Agent: retry when test results upload failed.
** TODO recompile cl-test-grid sources at every agetn run?
   As currently ASDf doesn't rebuild depending libraries
   when the libraries they depend on changed (add 
   links to this TODO item when Internet connection
   will be up)
** TODO kill process tree on unix in case the test suite exceeded timeout
   Currenlty we only kill the lisp process, but not it's children.
   Some test suites may start other programs, and it makes sense
   to kill the testsuite child process too. Implementation hint:
   the most portable API on unix to find out child processes,
   as it seems to be, is the ps program. We will need to
   implement a shell script killtree.sh <pid> which uses
   ps to find all descendents and kill the. Portable format
   of ps arguments should be used.
** TODO move test-grid::print-log-footer to the test-grid-agent package,
   and call it only form the agent process, not from the child, test suite
   running, process.
** TODO consider what test suite timeout value is the best (30 mins currently)
** TODO backtrace in logs
** TODO should the lisp-process-timeout condition inherit from serous-condition, error, or just condition?

** TODO Prevent child lisp process entering debugger.
   Note, different lisps treat unhangled signals during -eval
   differently: ECL exits with status 1, CCL enters debugger
   and hangs.
** TODO program parameters escaping is not perfect. When we
   run CLISP as an external process, it can not stand
   string literals with " inside.
** TODO enable/disable program parameters escapting depending on the
   external-program behaviour (consider also using input stream
   of the lisp process, or a temporary file)
** TODO prevent test run directory names conflict (currently they
   are named by timestamp with resolution to seconds)
** TODO temp file naming: ensure unique [probably specify random-state]
** TODO persistence.lisp format - sort and newline for every record

* User Requests
** TODO Vladimir Sedach: test multithreaded CLISP
** TODO Luis Oliveira: buld library heads from source control
* Backlog
** TODO Enable HTTP caching for library test logs (good recipe: https://developers.google.com/speed/docs/best-practices/caching)
** TODO add CCL revision to the version string (I have impression
   that CCL versions checked out at different time from the official release SVN
   svn co http://svn.clozure.com/publicsvn/openmcl/release/1.8/darwinx86/ccl
   may be different. I.e. despite it is called "release 1.8", the mainteiners
   commit fixes there, and the version string we use now - "ccl-1.8-f95-linux-x86",
   does not reflect this. In other words, our version string does not
   identify CCL uniquly.
** TODO a way to specify lib-wold as a quicklisp version with some 
   library versions overriden (checkout this particular 
   libraries from the scm), so that library author can quickly 
   get test result for his changes (fixes)  in scm. 
   An implementation idea to consider: almost every scm allows 
   to download asnapshot via http, so the quicklisp http machinery may
   be reused here, whithout running a shell command for 
   checkout.
   24h
** TODO code coverage: SBCL provides sb-cover. Integrate it somehow
        and publish in the reports.
        How?
        - extend the lib-result object with one more field, percentage 
          of the covered lines?
        - separate report?
        - or just output the information into the log?
** TODO osicat: automate the :no-resource condition
** TODO ABCL, cffi tests: return :no-resource if JNA is not available
** TODO cffi tests: return :no-resource if C compilation fails on linux
** TODO cl-fad and flexi-streams use c:\tmp as a temporary directory
   on Windows; it's not very good. Maybe try to provide them
   with a temporary directory inside of the cl-test-grid working
   dir?
** TODO Do not allow empty contributor contact in test results. Instead
   always ask the contributor to provide something, nickname,
   whatever.
** TODO A restart which will allow to skip the current library        :agent:
   test suite and proceed to the next one.
** TODO quicklisp distro version in report headers may be a link to 
   list of library versions in this ql version
   (like this: http://www.quicklisp.org/beta/releases.html, but
   it's only for the latest QL).
** TODO report overview: change "represents every test run as a separate row"  :report:overview:
   to
   "represents every <tt>test-grid:run-tests</tt> as a separate row"
   (after user will know this command from the main project description)
   ?
** TODO Description of CSV report may link to an example of the CSV report  :report:overview:
   imported to a Google Spreadsheet
   with pivot calculating avearage duration of 
   tests for every library.
** TODO spell check the reports-overview                    :report:overview:
** TODO an informer for CL implementation with libraries statuses? :report:informer:
** TODO quick access to the test run info from the pivot report table cell  :report:pivot:
   (or maybe just print the test run info to the log, like a header;
    but it is a duplication and also we will have invonviniences
    if we want to modify this infromation in the lob BLOB)
** TODO reduce non cl-test-grid output in the console (quicklisp output,
   compiler output, etc), so that cl-test-grid messages to the user
   are better visible.
** TODO Limit library output file size (how?).
** TODO finalize the terminology we use in the code
   to refer our main data: 
   - test status for a particular library
   - library test result object (includes the status 
     as well as log length, the key of the log
     in the online blob store, probably the
     library test duration)
   - list of library test results in a particular test 
     run
   - test run description, consists of lisp name,
     libraries set (think quicklisp distro),
     the user contacts, total test run duration,
     etc.
** TODO when GAE quotas (for requests, emails, anything else)
   are exceeded, recognize it and display a meaningfull
   message to the user.
** TODO For all the libraries which need manual configuration
   (cffi, usocket) provide guiding message to the
   user how to configure them, before running
   the tests.
** TODO usocket test suite might need manual configuration,
   see their README. Distinguish the case 
   when the manual configuration hasn't been
   performed and return :no-resource status.
** TODO An utility to delete blobs not used in db.lisp from the blobstore :server:
