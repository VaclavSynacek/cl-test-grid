* 0.4.0 Test Running Robustness - lisp-agent
** DONE top level error handler in test-grid-agent:main
   CLOSED: [2012-07-23 Пн 20:17]
   write the unhandled error stacktrace (with causes)
   into log and exit - never enter debugger as the 
   program should be suitable to run in background with cron.
** DONE prevent starting of two agents (try to open a socket on a constant port)
   CLOSED: [2012-07-23 Пн 22:04]
** DONE create test-grid-agent:api-compatible-p
   CLOSED: [2012-07-23 Пн 23:45]
** TODO check what lisps other than CCL can run lisp-agent
   - SBCL Windows had problems with external format (tried to pass unsupported
     argument :environemnt to SBCL process functions; then tried
     to use /bin/env. maybe fixed already?)
   - external-program on some lisps do not support async process invocations 
   - record all known portability proglems somewhere
** TODO update README.org to reflect the current status and priorities (in
   other words, reflect the changes during the last month)
** TODO publish the lisp-agent - merge lisp-agent to master
** DONE Give every agent and unique ID. store the ID in the agent persistence.
   CLOSED: [2012-07-24 Вт 03:20]
** DONE error handling in the main process - during a test run and in other situations
   CLOSED: [2012-07-23 Пн 04:21]
   For example, after testing some library, the output file with library
   status is not found. Record :FAIL and proceed to further libraries.
   How to handle error during test results submission?
** DONE Agent: when test results upload failed, do not mark this lisp as tested in persistence.
   CLOSED: [2012-07-10 Вт 15:47]
** DONE run each test suite in a separate process
   CLOSED: [2012-06-15 Пт 01:44]
** DONE enforce the libraries source code recompilation on every test run
   CLOSED: [2012-07-09 Пн 16:54]
   by configuring asdf:output-translations to a temporary 
   subdirectory in the test-run directory
* 0.4.1 Code cleanup after finishing lisp-agent 
** finish breaking-up the old monolitic module test-grid:
   test grid systems will consist of modules for:
   - testsuites 
     a function libtest(libname) runs test suite
     of the specified library, downloading the lib from quicklisp
     if necessary, and returns test result in a unified format.
     I.e. the module knows how to invoke the library test suite
     and has adapters for test results of various test frameworks
     to the testgrid test result format.
   - agent
     the program with can run test in child lisp processes,
     knows which lisps the contributor has on the machine,
     decides when to run tests, and can upload the test
     results to the central server.
     [the changes required are small - agent will receive
     some code from the current test-grid.lisp,
     for example test suite log header/footer printing.
     Maybe the test suite log will include whole lisp
     process output, from the lisp startup (now we 
     start logging bit later, right before invoking
     the test suite)]
   - admin
     code to receive test results and add to db
     [remains unchanged]
   - reporting
     [reamains unchanged]
   - blobstore
     [remains unchanges]
   - data 
     objects moving between other modules: test run, test results,
     printing for these objects; and the database
   - utils

** agent fs structure functions: make the workdir root
   a configurable property of agent, and fs structure
   functions shoud accept agent as a parameter.
* 0.5.0 Reports Improve 2
** TODO make lisp code the main and the easiest interface to the test results:
   convenient interation, filtering and matching functions
** TODO document the data format, data access functions, reporting
   functions and utilities.
** TODO an informer which may be embedded into a library    :report:informer:
   project page, with reports about the test statuses 
   for this single library on various platforms with
   various quicklisp versions
** TODO Filters for pivot reports
** TODO limit amount of data included into to HTML reports to the last 3 quicklisp releases 
   to improve the page performance and load time.
* 0.6.0 Add more test suites
  - drakma test suite - create and ensure drakma works on all the lisps.
    Drakma test suite is a must. HTTP client today is as vital thing
    as file system access. It should work on all the lisps.
    Create a test suite, the simples one - download one file
    form common-lisp.net. And make sure it works on all the lisps.
* lisp-agent postponed issues
** TODO Admin stores a hashmap for lisps to be tested (or skipped)
    by particular agent in the aget sources (note, the agent
    updates the source every time from git) This allows to distribute work
    between agents having overlaping sets of lisp implementations.
    Need a mechanizm for announcing the lisps present on
    agent (probably just add agent-id to the test run
    description and consider test results as an announcement).
    As the compilers versions are changed, probably the 
    hashmap to store responsibility specifications should
    contain not full lisp implementation identifier, 
    but only generic name, like SBCL instead of SBCL 1.0.57.
    But allow for ECL-bytecode to be distingueshed from
    ECL-lisp-to-c. I.e. in the end we can get some kind
    of patterns for lisp implementation identifier. And
    the identifier will be a structured object, not just
    a string; provably it will even contains *features*
    of the lisp implementaion.
** TODO Agent: retry when test results upload failed.
** TODO recompile cl-test-grid sources at every agetn run?
   As currently ASDf doesn't rebuild depending libraries
   when the libraries they depend on changed (add 
   links to this TODO item when Internet connection
   will be up)
** TODO kill process tree on unix in case the test suite exceeded timeout
   Currenlty we only kill the lisp process, but not it's children.
   Some test suites may start other programs, and it makes sense
   to kill the testsuite child process too. Implementation hint:
   the most portable API on unix to find out child processes,
   as it seems to be, is the ps program. We will need to
   implement a shell script killtree.sh <pid> which uses
   ps to find all descendents and kill the. Portable format
   of ps arguments should be used.
** TODO move test-grid::print-log-footer to the test-grid-agent package,
   and call it only form the agent process, not from the child, test suite
   running, process.
** TODO consider what test suite timeout value is the best (30 mins currently)
** TODO backtrace in logs
** TODO should the lisp-process-timeout condition inherit from serous-condition, error, or just condition?

* Backlog
** TODO install multithreaded CLISP and run tests on it
** TODO add CCL revision to the version string (I have impression
   that CCL versions checked out at different time from the official release SVN
   svn co http://svn.clozure.com/publicsvn/openmcl/release/1.8/darwinx86/ccl
   may be different. I.e. despite it is called "release 1.8", the mainteiners
   commit fixes there, and the version string we use now - "ccl-1.8-f95-linux-x86",
   does not reflect this. In other words, our version string does not
   identify CCL uniquly.
** TODO a way to specify lib-wold as a quicklisp version with some 
   library versions overriden (checkout this particular 
   libraries from the scm), so that library author can quickly 
   get test result for his changes (fixes)  in scm. 
   An implementation idea to consider: almost every scm allows 
   to download asnapshot via http, so the quicklisp http machinery may
   be reused here, whithout running a shell command for 
   checkout.
   24h
** TODO code coverage: SBCL provides sb-cover. Integrate it somehow
        and publish in the reports.
        How?
        - extend the lib-result object with one more field, percentage 
          of the covered lines?
        - separate report?
        - or just output the information into the log?
** TODO osicat: automate the :no-resource condition
** TODO Test status should include separate indicator for the library compilation and loading.
** TODO ABCL, cffi tests: return :no-resource if JNA is not available
** TODO cffi tests: return :no-resource if C compilation fails on linux
** TODO cl-fad and flexi-streams use c:\tmp as a temporary directory
   on Windows; it's not very good. Maybe try to provide them
   with a temporary directory inside of the cl-test-grid working
   dir?
** TODO Do not allow empty contributor contact in test results. Instead
   always ask the contributor to provide something, nickname,
   whatever.
** TODO A restart which will allow to skip the current library        :agent:
   test suite and proceed to the next one.
** TODO how to enforce rebuild when loading an ASDF system?
   Important for ECL, because ECL bytecompiler and lisp-to-c
   compiler produce incompatible .fasl files, but ASDF
   stores the files in the same location, because both
   flavors of ECL have the same (asdf:immplementation-identifier).
** TODO quicklisp distro version in report headers may be a link to 
   list of library versions in this ql version
   (like this: http://www.quicklisp.org/beta/releases.html, but
   it's only for the latest QL).
** TODO report overview: change "represents every test run as a separate row"  :report:overview:
   to
   "represents every <tt>test-grid:run-tests</tt> as a separate row"
   (after user will know this command from the main project description)
   ?
** TODO Description of CSV report may link to an example of the CSV report  :report:overview:
   imported to a Google Spreadsheet
   with pivot calculating avearage duration of 
   tests for every library.
** TODO spell check the reports-overview                    :report:overview:
** TODO an informer for CL implementation with libraries statuses? :report:informer:
** TODO quick access to the test run info from the pivot report table cell  :report:pivot:
   (or maybe just print the test run info to the log, like a header;
    but it is a duplication and also we will have invonviniences
    if we want to modify this infromation in the lob BLOB)
** TODO reduce non cl-test-grid output in the console (quicklisp output,
   compiler output, etc), so that cl-test-grid messages to the user
   are better visible.
** TODO save all the output to a log, so that the tests may be run in background
** TODO Limit library output file size (how?).
** TODO Prevent HTML injection via test-run-info                     :report:
** TODO finalize the terminology we use in the code
   to refer our main data: 
   - test status for a particular library
   - library test result object (includes the status 
     as well as log length, the key of the log
     in the online blob store, probably the
     library test duration)
   - list of library test results in a particular test 
     run
   - test run description, consists of lisp name,
     libraries set (think quicklisp distro),
     the user contacts, total test run duration,
     etc.
** TODO when GAE quotas (for requests, emails, anything else)
   are exceeded, recognize it and display a meaningfull
   message to the user.
** TODO watchdog for hanging tests
** TODO For all the libraries which need manual configuration
   (cffi, usocket) provide guiding message to the
   user how to configure them, before running
   the tests.
** TODO usocket test suite might need manual configuration,
   see their README. Distinguish the case 
   when the manual configuration hasn't been
   performed and return :no-resource status.
** TODO should we save library log to a file only if the tests failed, 
   or always? (now we save log in any case)
** TODO An utility to delete blobs not used in db.lisp from the blobstore :server:
** TODO classify all the errors and register as tickets
   this task is likely to be abandoned
